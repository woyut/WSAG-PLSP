import torch
import numpy as np
import cv2
import os
from tqdm import tqdm

dir = "/path/to/AGD20K" # TODO

split = "Seen"
mod_PL_dir = "" # TODO the dirname for the PL generated by pl_refine_inf.py
SAM_dir = "SAM_masks_pps8" # the dirname for the SAM prior masks
res_dir = "" # TODO the dirname for saving the PL processed by SAM

# split = "Unseen"
# mod_PL_dir = "" # TODO the dirname for the PL generated by pl_refine_inf.py
# SAM_dir = "SAM_masks_pps8" # the dirname for the SAM prior masks
# res_dir = "" # TODO the dirname for saving the PL processed by SAM

def IoU(x, y):
    inter = np.logical_and(x, y)
    union = np.logical_or(x, y)
    if inter.sum() >= y.sum() * 0.9:
        return 0.
    return inter.sum() / (x.sum() + 1e-8)

ego_obj_dict = torch.load(f"{dir}/{split}/trainset/det_wholeobj_ego.pth")
for verb in os.listdir(os.path.join(dir, split, "trainset", mod_PL_dir)):
    for noun in os.listdir(os.path.join(dir, split, "trainset", mod_PL_dir, verb)):
        os.makedirs(os.path.join(dir, split, "trainset", res_dir, verb, noun), exist_ok=True)
        for filename in os.listdir(os.path.join(dir, split, "trainset", mod_PL_dir, verb, noun)):
            modpl = cv2.imread(os.path.join(dir, split, "trainset", mod_PL_dir, verb, noun, filename), cv2.IMREAD_GRAYSCALE) > 0
            
            select_sams = []
            obj_id = 0
            while os.path.exists(os.path.join(dir, split, "trainset", SAM_dir, verb, noun, filename.replace(".jpg", f"_{obj_id}-0.png"))):
                sam_id = 0
                obj_box = ego_obj_dict[verb][noun][filename][0][obj_id]
                l,t,r,b = [int(x) for x in obj_box]
                ious = []
                sams = []
                while os.path.exists(os.path.join(dir, split, "trainset", SAM_dir, verb, noun, filename.replace(".jpg", f"_{obj_id}-{sam_id}.png"))):
                    ori_sam = np.zeros_like(modpl)
                    sam = cv2.imread(os.path.join(dir, split, "trainset", SAM_dir, verb, noun, filename.replace(".jpg", f"_{obj_id}-{sam_id}.png")), cv2.IMREAD_GRAYSCALE) > 0
                    # print(sam.shape)
                    ori_sam[t:b, l:r] = sam
                    iou = IoU(ori_sam, modpl)
                    ious.append(iou)
                    sams.append(ori_sam)
                    sam_id += 1
                best_iou = max(ious)
                for iou, sam in zip(ious, sams):
                    if iou > max(0.1, best_iou*0.9): # TODO
                        # print(iou)
                        select_sams.append(sam)
                obj_id += 1
            all_select_sam = np.zeros_like(modpl)
            for sam in select_sams:
                all_select_sam = np.logical_or(sam, all_select_sam)
            if all_select_sam.sum() > 0:
                res = (all_select_sam.astype(np.uint8)) * 255
                assert not os.path.exists(os.path.join(dir, split, "trainset", res_dir, verb, noun, filename))
                cv2.imwrite(os.path.join(dir, split, "trainset", res_dir, verb, noun, filename), res)
                